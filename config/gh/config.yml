# What protocol to use when performing git operations. Supported values: ssh, https
git_protocol: https
# What editor gh should run when creating issues, pull requests, etc. If blank, will refer to environment.
editor:
# When to interactively prompt. This is a global config that cannot be overridden by hostname. Supported values: enabled, disabled
prompt: enabled
# A pager program to send command output to, e.g. "less". Set the value to "cat" to disable the pager.
pager:
  bat --style plain
# Aliases allow you to create nicknames for gh commands
aliases:
    co: '!id="$(gh pr list -L100 | fzf --no-preview --reverse | cut -f1)"; [ -n "$id" ] && gh pr checkout "$id"'
    _issue_user_repo_view: |-
        !(
        # parse the options
        tmp_getops=`getopt -o u:r:m:c: --long user,repo,milestone,comment -- "$@"`
        eval set -- "$tmp_getops"

        while true ; do
            case "$1" in
                -u|--user) user="$2"; shift 2;;
                -r|--repo) repo="$2"; shift 2;;
                -m|--milestone) milestone="$2"; shift 2;;
                -c|--comment) comment=true ; shift 1;;
                --) shift; break;;
                *) ;;
            esac
        done

        fzf_default_opts="--no-preview --reverse --multi=1"

        # option -c to comment an issue or view
        if [ -z "$comment" ]
        then
            command=view
        else
            command=comment
        fi

        re_number="^[0-9]+$"

        if [ -z "$milestone" ]
        then
            id="$(gh issue list -a $user -R $repo | fzf $fzf_default_opts | cut -f1)"
        else
           echo "$milestone" | grep -q -E "$re_number"  && \
                                           id="$(gh issue list -a $user -R $repo --milestone "Iteration $milestone" | fzf $fzf_default_opts | cut -f1)" || \
                                           id="$(gh issue list -a $user -R $repo --milestone "$milestone" | fzf $fzf_default_opts | cut -f1)"
        fi

        [ -n "$id" ] && gh issue -R $repo $command "$id"
        )
    issues: |-
        !(case $1 in
         content)
            tmp_getops=`getopt -o c: --long comment -- "$@"`
            eval set -- "$tmp_getops"

            while true ; do
                case "$1" in
                    -c|--comment) comment="$1"; shift 1;;
                    --) shift; break;;
                    *) ;;
                esac
            done

            user="$GIT_USER"
            repo=aodn/content
            gh _issue_user_repo_view -u $user -r $repo $comment
            ;;

         issues)
            tmp_getops=`getopt -o c: --long comment -- "$@"`
            eval set -- "$tmp_getops"

            while true ; do
                case "$1" in
                    -c|--comment) comment="$1"; shift 1;;
                    --) shift; break;;
                    *) ;;
                esac
            done

            user="$GIT_USER"
            repo=aodn/issues
            gh _issue_user_repo_view -u $user -r $repo $comment
            ;;

         po_backlog_milestone)
            tmp_getops=`getopt -o c: --long comment -- "$@"`
            eval set -- "$tmp_getops"

            while true ; do
                case "$1" in
                    -c|--comment) comment="$1"; shift 1;;
                    --) shift; break;;
                    *) ;;
                esac
            done

            user="$GIT_USER"
            repo=aodn/po-backlog
            shift; milestone="$1"
            gh _issue_user_repo_view -u $user -r $repo -m $milestone $comment
            ;;

         po_backlog_top)
            tmp_getops=`getopt -o c: --long comment -- "$@"`
            eval set -- "$tmp_getops"

            while true ; do
                case "$1" in
                    -c|--comment) comment="$1"; shift 1;;
                    --) shift; break;;
                    *) ;;
                esac
            done


            user="$GIT_USER"
            repo=aodn/po-backlog
            milestone="Top of PO Backlog"
            gh _issue_user_repo_view -u $user -r $repo -m "$milestone" $comment
            ;;


         po_backlog)
            tmp_getops=`getopt -o c: --long comment -- "$@"`
            eval set -- "$tmp_getops"

            while true ; do
                case "$1" in
                    -c|--comment) comment="$1"; shift 1;;
                    --) shift; break;;
                    *) ;;
                esac
            done


            user="$GIT_USER"
            repo=aodn/po-backlog
            gh _issue_user_repo_view -u $user -r $repo $comment
            ;;

         aodndata)
            tmp_getops=`getopt -o c: --long comment -- "$@"`
            eval set -- "$tmp_getops"

            while true ; do
                case "$1" in
                    -c|--comment) comment="$1"; shift 1;;
                    --) shift; break;;
                    *) ;;
                esac
            done


            user="$GIT_USER"
            repo=aodn/python-aodndata
            gh _issue_user_repo_view $user -r $repo $comment
            ;;

         data_services)
            tmp_getops=`getopt -o c: --long comment -- "$@"`
            eval set -- "$tmp_getops"

            while true ; do
                case "$1" in
                    -c|--comment) comment="$1"; shift 1;;
                    --) shift; break;;
                    *) ;;
                esac
            done


            user="$GIT_USER"
            repo=aodn/data-services
            gh _issue_user_repo_view -u $user -r $repo $comment
            ;;

         *)

            echo The following commands are supported from '\e[1;31m'gh issues'\e[0m':
            echo '\t\e[1;32m'content'\e[0m' '\t list all issues for user from content repo'
            echo '\t\e[1;32m'issues'\e[0m' '\t list all issues for user from issues repo'
            echo '\t\e[1;32m'po_backlog'\e[0m' '\t list all issues for user from po_backlop repo'
            echo '\t\e[1;32m'aodndata'\e[0m' '\t list all issues for user from aodndata repo'
            echo '\t\e[1;32m'data_services'\e[0m' '\t list all issues for user from data-services repo'
            echo '\t\e[1;32m'po_backlog_milestone [VALUE]'\e[0m' '\t list all issues for user from po_backlop repo for specific milestone number'
            echo '\t\e[1;32m'po_backlog_top '\e[0m' '\t list all issues for user from po_backlop repo for top of backlog'

            ;;
          esac)
