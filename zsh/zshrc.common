# check if zinit is installed
ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"
[ ! -d $ZINIT_HOME ] && mkdir -p "$(dirname $ZINIT_HOME)"
[ ! -d $ZINIT_HOME/.git ] && git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME"
source "${ZINIT_HOME}/zinit.zsh"

# Skip the not really helping Ubuntu global compinit
skip_global_compinit=1

autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# TMUX conf
if [ ! -n "${SSH_TTY+1}" ]; then
#if [[ ! -v SSH_TTY ]]; then
    # this always starts tmux
    ZSH_TMUX_AUTOSTART=true
    ZSH_TMUX_AUTOCONNECT=true
    ZSH_TMUX_FIXTERM=true
    ZSH_TMUX_AUTOQUIT=true
fi

# fix perl language issues
export LANGUAGE="en_AU:en"
#export LC_ALL="en_IE.UTF-8"
export LANG="en_IE.UTF-8"

## Turns out that compinit is ZSH checking the cached .zcompdump to see if it needs regenerating. The simplest fix is to only do that once a day. Thanks to this comment, we can achieve that pretty easily.
#autoload -Uz compinit
#if [[ -n ${ZDOTDIR}/.zcompdump(#qN.mh+24) ]]; then
    #compinit;
#else
    #compinit -C;
#fi;

# check where is linuxbrew installed
if [[ -d $HOME/.linuxbrew ]]; then
    export HOMEBREW_PREFIX=$HOME/.linuxbrew
elif [[ -d /home/linuxbrew ]]; then
    export HOMEBREW_PREFIX=/home/linuxbrew/.linuxbrew
fi

##export POWERLEVEL9K_COLOR_SCHEME='light'
## Set up the prompt
#export TERM="xterm-256color"
#export PATH="$HOMEBREW_PREFIX/bin:$PATH"
#export SHELL=$HOMEBREW_PREFIX/bin/zsh
#export DEFAULT_USER=loz
#export DISPLAY=:0.0

#setopt nosharehistory
#setopt interactivecomments

## Essential
#source "${ZINIT_HOME}/zinit.zsh"
#autoload -Uz _zinit
#(( ${+_comps} )) && _comps[zinit]=_zinit
##source ~/.zplug/init.zsh

## completion for cheat
#_cmpl_cheat() {
#reply=($(cheat -l | cut -d' ' -f1))
#}
#compctl -K _cmpl_cheat cheat

# Configure ssh-agent plugin
zstyle :omz:plugins:ssh-agent agent-forwarding on # Enabled agent forwarding
zstyle :omz:plugins:ssh-agent identities id_rsa # Only auto load rsa keys

# if you want red dots to be displayed while waiting for completion
COMPLETION_WAITING_DOTS="true"

# change the size of history files
export HISTSIZE=32768;
export HISTFILESIZE=$HISTSIZE;

export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH:$HOME/.local/bin"
eval "$(pyenv init --path)"

# pip venv
#export WORKON_HOME=$HOME/.virtualenvs
#export PROJECT_HOME=$HOME/Devel
#[ -f /usr/local/bin/virtualenvwrapper.sh ] && source /usr/local/bin/virtualenvwrapper.sh

setopt prompt_subst # Make sure prompt is able to be generated properly.

## Load powerlevel10k theme
##zinit ice depth"1" # git clone depth
##zinit light romkatv/powerlevel10k

# starship theme
zinit ice as"command" from"gh-r" \
          atclone"./starship init zsh > init.zsh; ./starship completions zsh > _starship" \
          atpull"%atclone" src"init.zsh"
zinit light starship/starship


# Option B – a load with Turbo-Mode being in use
#zinit ice wait'0' lucid atload'zsh-startify'
#zinit load zdharma-continuum/zsh-startify

zinit ice wait"2" lucid
zinit light "chrissicool/zsh-256color"

zi lucid light-mode wait'[[ -n ${ZLAST_COMMANDS[(r)g*]} ]]' for \
  "OMZ::plugins/git-extras/git-extras.plugin.zsh" \
  "wfxr/forgit" \
  "fdw/ranger_zoxide"

# conflict with https://github.com/garabik/grc/ so removing default forgit aliases
export FORGIT_NO_ALIASES=True
zi lucid light-mode wait'[[ $PWD = */github || $PWD = */github_repo/* ]]' for \
  "wfxr/forgit"
  #"OMZ::plugins/git/git.plugin.zsh" \
  #"unixorn/git-extra-commands" \
source ~/.alias_forgit


zi has'zoxide' wait lucid for \
  z-shell/zsh-zoxide

zi lucid light-mode wait'[[ -n ${ZLAST_COMMANDS[(r)j*]} ]]' for \
    "OMZP::autojump"
    #
eval "$(zoxide init zsh)"

zi lucid light-mode wait"2" for \
    "OMZP::zsh-interactive-cd" \
    "zsh-users/zsh-history-substring-search" \
    "zsh-users/zsh-syntax-highlighting" \
    "rummik/zsh-tailf" \
    "OMZP::cp" # cp with rsync -> call cpv
    #"z-shell/zsh-navigation-tools" \
    #"OMZP::zsh-navigation-tools" \
    

zi lucid light-mode wait'3' for \
  "eastokes/aws-plugin-zsh" \
  "esc/conda-zsh-completion" \
  "soimort/translate-shell" \
  #"unixorn/docker-helpers.zshplugin" \
  #"hchbaw/auto-fu.zsh" \

zi wait lucid for \
  atinit"ZINIT[COMPINIT_OPTS]=-C; zicompinit; zicdreplay" \
    light-mode zdharma-continuum/fast-syntax-highlighting \
  atload"zicompinit; zicdreplay" blockf \
    light-mode zsh-users/zsh-completions \
  compile'{src/*.zsh,src/strategies/*}' atload"!_zsh_autosuggest_start" \
    light-mode zsh-users/zsh-autosuggestions

zi lucid light-mode wait'3' for \
    OMZP::"brew" \
    OMZP::"command-not-found" \
    OMZP::"common-aliases" \
    OMZP::"docker-compose" \
    OMZP::"extract" \
    OMZP::"nmap" \
    OMZP::"pip" \
    OMZP::"rsync" \
    OMZP::"sudo" \
    OMZP::"systemd" \
    OMZP::"taskwarrior" \
    OMZP::"vagrant" \
    OMZP::"virtualenv" \
    OMZP::"web-search" 
    #OMZP::"docker" \


if [ ! -n "${SSH_TTY+1}" ]; then
    zinit snippet OMZP::"tmux" #,   from:oh-my-zsh
fi

# aliases
#. ~/.zplug/repos/robbyrussell/oh-my-zsh/plugins/common-aliases/common-aliases.plugin.zsh

# overwrite aliases if needed
[ -f $HOME/.alias ] && source $HOME/.alias

#ZSH history
setopt append_history
setopt hist_expire_dups_first
setopt hist_fcntl_lock
setopt hist_ignore_all_dups
setopt hist_lex_words
setopt hist_reduce_blanks
setopt hist_save_no_dups
#setopt share_history

export CLICOLOR=1
export BLOCK_SIZE=human-readable # https://www.gnu.org/software/coreutils/manual/html_node/Block-size.html
export HISTSIZE=11000
export SAVEHIST=10000
export HISTFILE=$HOME/.zsh_history

# TLDR
export TLDR_HEADER='magenta bold underline'
export TLDR_QUOTE='italic'
export TLDR_DESCRIPTION='green'
export TLDR_CODE='red'
export TLDR_PARAM='blue'

# binkey for HOME END
bindkey "\033[1~" beginning-of-line
bindkey "\033[4~" end-of-line
bindkey "^[[3~" delete-char

# GRC colorisation
[[ -s "$HOMEBREW_PREFIX/etc/grc.zsh" ]] && source $HOMEBREW_PREFIX/etc/grc.zsh

#FZF
if command -v fd > /dev/null; then
    export FZF_DEFAULT_COMMAND="fd" # CTRL-T's command
    # for more info see fzf/shell/completion.zsh
    _fzf_compgen_path() {
        fd . "$1"
    }
    _fzf_compgen_dir() {
        fd --type d . "$1"
    }
fi

export FZF_NETCDF_UUID_REGEXP="[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
export FZF_DEFAULT_OPTS="
--info=inline
--height=80%
--multi
--preview '\
    ( (echo {} | grep -q -E \"*\.nc$\") && ncdump -h {}) || \
    ( (echo {} | grep -q -E \"*\.nc\..*\") && ncdump -h {}) || \
    ( (echo {} | grep -q -E \"*\.zip$\") && zip -sf {}) || \
    ( (echo {} | grep -q -E \"*\.zip\.$FZF_NETCDF_UUID_REGEX\") && zip -sf {}) || \
    ( (echo {} | grep -q -E \"*\.(log|xml|txt)$\") && bat {}) || \
    ( (echo {} | grep -q -E \"*\.(log|xml|txt)\..*\") && bat {}) || \
    ( [[ -f {} ]] && (bat --style=numbers --color=always {} || cat {})) || \
    ( [[ -d {} ]] && (tree -C {} | less)) || \
    echo {} 2> /dev/null | head -200'
--color='hl:148,hl+:154,pointer:032,marker:010,bg+:237,gutter:008'
--prompt='∼ ' --pointer='▶' --marker='✓'
--bind '?:toggle-preview'
--bind 'alt-a:select-all'
--bind 'alt-d:deselect-all'
--bind 'alt-t:toggle-all'
--bind 'alt-y:execute-silent(echo {+} | xclip -sel clip)'
--bind 'alt-e:execute(nvim {+}  > /dev/tty)'
--bind 'alt-v:execute(code {+})'
"

export FORGIT_FZF_DEFAULT_OPTS="
--prompt='∼ ' --pointer='▶' --marker='✓'
--border
--cycle
--reverse
--height '80%'
"

export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND --type f -LHI" # ALT-C's command
export FZF_ALT_C_COMMAND="$FZF_DEFAULT_COMMAND --type d"
export FZF_CTRL_T_OPTS="--select-1 --exit-0"
# open vim with fzf; type ctrl e
bindkey -s '^e' 'vim $(fd -LIH --type f | fzf -m --preview "([[ -f {} ]] && (bat --style=numbers --color=always {} || cat {}))")\n'
#bindkey -s '^e' 'vim $(fd --type f | fzf -m --preview "head -200 {}")\n'
#bindkey -s '^e' 'fd --type f | vim $(fzf  --preview "([[ -f {} ]] && (bat --style=numbers --color=always {} || cat {})) || ([[ -d {} ]] && (tree -C {} | less)) || echo {} 2> /dev/null | head -200")\n'
bindkey -s '^n' 'vim $(fd -e nc | fzf -m --preview "([[ -f {} ]] && ncdump -h {})"\n'
bindkey -s '^n' 'ncdump -t $(fd -HI -e nc | fzf -m --preview "([[ -f {} ]] && ncdump -h {})") | less\n ' # ctrl n -> ncdump 

#####################
fpath=(~/.zsh_alias "${fpath[@]}")
autoload -Uz history-search-end cani vmc vmi lps kp fp cani bip bup bcp tmuxify utils ll lx
typeset -U PATH fpath

#if zplug check zsh-users/zsh-history-substring-search; then
    #zmodload zsh/terminfo
    #bindkey "$terminfo[kcuu1]" history-substring-search-up
    #bindkey "$terminfo[kcud1]" history-substring-search-down
#fi

test -d $HOMEBREW_PREFIX && PATH="$HOMEBREW_PREFIX/bin:$HOMEBREW_PREFIX/sbin:$PATH"
test -r ~/.bash_profile && echo "export PATH='$(brew --prefix)/bin:$(brew --prefix)/sbin'":'"$PATH"' >>~/.bash_profile
echo "export PATH='$(brew --prefix)/bin:$(brew --prefix)/sbin'":'"$PATH"' >>~/.profile

[ -f ~/.cheat/fzf.bash ] && source ~/.cheat/fzf.bash
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
[ -f ~/bin/tldr ] && compctl -k "($( tldr 2>/dev/null --list))" tldr ## tldr completion

if command -v gh > /dev/null; then
    gh completion -s zsh > ~/.zsh_alias/_gh && chmod +x ~/.zsh_alias/_gh
fi


# inherit aliases completion
# https://unix.stackexchange.com/questions/177902/zsh-completion-on-the-second-command-or-after-an-alias/178054#178054
unsetopt complete_aliases

# rbenv
if command -v rbenv > /dev/null; then
    eval "$(rbenv init - zsh)"
fi


# Use Zsh's built-in globbing to check for .zsh files
# Enable nomatch to prevent errors when no matches are found
setopt nomatch

# Use Zsh's built-in globbing to check for .zsh files
files=($HOME/.zsh_functions/*.zsh)

# Check if files array is non-empty
if (( ${#files[@]} > 0 )); then
  # Loop through each .zsh file and source it with zinit
  for file in "$files[@]"; do
    zinit snippet "$file"
  done
else
  echo "No .zsh files found in $HOME/.zsh_functions/"
fi
#
# Ensure completions are available
autoload -Uz compinit
compinit
# to check setup
#type _fzf_complete_docker



# FOR ssh autocomplete
# Highlight the current autocomplete option
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"

# Better SSH/Rsync/SCP Autocomplete
zstyle ':completion:*:(scp|rsync):*' tag-order ' hosts:-ipaddr:ip\ address hosts:-host:host files'
zstyle ':completion:*:(ssh|scp|rsync):*:hosts-host' ignored-patterns '*(.|:)*' loopback ip6-loopback localhost ip6-localhost broadcasthost
zstyle ':completion:*:(ssh|scp|rsync):*:hosts-ipaddr' ignored-patterns '^(<->.<->.<->.<->|(|::)([[:xdigit:].]##:(#c,2))##(|%*))' '127.0.0.<->' '255.255.255.255' '::1' 'fe80::*'

# Allow for autocomplete to be case insensitive
zstyle ':completion:*' matcher-list '' 'm:{[:lower:][:upper:]}={[:upper:][:lower:]}' \
  '+l:|?=** r:|?=**'

# Initialize the autocompletion
autoload -Uz compinit && compinit -i


# Automatically rename tmux pane based on the running command
rename_tmux_pane() {
    # Get the current tmux pane ID
    local pane=$(tmux display-message -p '#{pane_id}')
    # Get the last executed command
    local cmd=${1:-$(fc -ln -1 | awk '{print $1}')}
    # Set the pane name
    tmux select-pane -T "$cmd" -t "$pane"
}

# Hook into the zsh preexec function to rename the pane
preexec() {
    rename_tmux_pane "$1"
}

