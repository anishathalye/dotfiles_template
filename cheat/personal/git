# To set your identify:
git config --global user.name "John Doe"
git config --global user.email johndoe@example.com

# To set your editor:
git config --global core.editor emacs

# To enable color:
git config --global color.ui true

# To stage all changes for commit:
git add --all

# To commit staged changes
git commit -m "Your commit message"

# To edit previous commit message
git commit --amend

# To removed staged and working directory changes
git reset --hard

# To discard modified files
git reset --hard HEAD

# OR How to reset my local repository to be just like the remote repository HEAD
git fetch origin
git reset --hard origin/master

# To remove untracked files
git clean -f -d

# To remove untracked and ignored files
git clean -f -d -x

# To push to the tracked master branch:
git push origin master

# To push to a specified repository:
git push git@github.com:username/project.git

# To delete the branch "branch_name"
git branch -D branch_name

# To see who commited which line in a file
git blame filename

# To sync a fork with the master repo:
git remote add upstream git@github.com:name/repo.git    # Set a new repo
git remote -v                                           # Confirm new remote repo
git fetch upstream                                      # Get branches
git branch -va                                          # List local - remote branches
git checkout master                                     # Checkout local master branch
git checkout -b new_branch                              # Create and checkout a new branch
git merge upstream/master                               # Merge remote into local repo
git show 83fb499                                        # Show what a commit did.
git show 83fb499:path/fo/file.ext                       # Shows the file as it appeared at 83fb499.
git diff branch_1 branch_2                              # Check difference between branches
git log                                                 # Show all the commits
git status                                              # Show the changes from last commit


# merge last n commits
git rebase -i HEAD~n
->replace with squash or s all commits you wanna merged to the picked one
->change the commit message
git push -f origin branch_name  	                      # to force the merge on github in case the branch was already pushed


git clean -df & git checkout .                                #  discard unstaged changes in git
git branch --merged | grep -v "\*" | xargs -n 1 git branch -d #To delete all branches that are already merged into the currently checked out branch:

# Cleans the working tree by recursively removing files that are not under version control, starting from the current directory.
#-d = Remove untracked directories in addition to untracked files -f = Force (might be not necessary depending on  clean.requireForce setting)
git clean -df


# This checks out the current index for the current directory, throwing away all changes in files from the current directory downwards.
git checkout .

# Set up a repository's origin branch to be SSH - (modify)
git remote set-url origin git@github.com:nikhilbhardwaj/abc.git


# List git-ignored files
$ git ls-files . --ignored --exclude-standard --others

# List untracked files
$ git ls-files . --exclude-standard --others

# rebase against master (when working on different branch)
git checkout master;git pull;
git checkout workingBranch;
git rebase master;


# Force Git to overwrite local files on pull
git fetch --all
git reset --hard origin/'branch'
# git fetch downloads the latest from remote without trying to merge or rebase anything.
# Then the git reset resets the master branch to what you just fetched. The --hard option changes all the files in your working tree to match the files in origin/master

# GIT: ignoring changes in tracked files
git update-index --assume-unchanged <file> # run the following command on the file or path you want to ignore the changes of:
git update-index --no-assume-unchanged <file> # If you wanna start tracking changes again run the following command

# git geoserver master to prod
git co master; git pull; git co production;git pull;
git merge master;
git push origin production;

# get just one file from another branch
git checkout master               # first get back to master
git checkout experiment -- app.js # then copy the version of app.js from branch "experiment"


# Change the current branch to master in git
# How to replace master branch in git, entirely, from another branch?
git checkout better_branch
git merge --strategy=ours master    # keep the content of this branch, but record a merge
git checkout master
git merge better_branch             # fast-forward master up to the merge
