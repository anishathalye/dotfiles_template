# To ssh via pem file (which normally needs 0600 permissions):
ssh -i /path/to/file.pem user@example.com

# To connect on an non-standard port:
ssh -p 2222 user@example.com

# To connect and forward the authentication agent
ssh -A user@example.com

# To execute a command on a remote server:
ssh -t user@example.com 'the-remote-command'

# To tunnel an x session over SSH:
ssh -X user@example.com

# Redirect traffic with a tunnel between local host (port 8080) and a remote
# host (remote.example.com:5000) through a proxy (personal.server.com):
ssh -f -L 8080:remote.example.com:5000 user@personal.server.com -N

# To launch a specific x application over SSH:
ssh -X -t user@example.com 'chromium-browser'

# To create a SOCKS proxy on localhost and port 9999
ssh -D 9999 user@example.com

# -X use an xsession, -C compress data, "-c blowfish" use the encryption blowfish
ssh user@example.com -C -c blowfish -X

# For more information, see:
# http://unix.stackexchange.com/q/12755/44856
#

openssl rsa -in ~/.ssh/id_rsa -out /tmp/id_rs_plain

# jenkins ssh
ssh USERd@kenkins.aodn.org.au -p 2222 build chef_cook_node -p NODE_NAME=14-nsp-mel -p GIT_BRANCH=master

# rt forwarding

# port forwarding on my machine via its6 :
ssh -fNg -L 5556:DEST-MACHINE:5432 VIA-TUNNEL-MACHINE6 ssh -A USERd@DEST-MACHINE

# port forwarding to scp via ssh tunnel :
# Step 1: Establish SSH tunnel. Pick a temporary port between 1024 and 32768 (12345 in this example). Port 22 will be used by scp.
ssh -fNg -L 12345:DEST-machine:22 TUNNEL-MACHINE
# Step 2: Run scp against port 1234 pretending 127.0.0.1 (localhost) is the remote machine R, and the command will be sent to R.
scp -r  -P 12345 USER@127.0.0.1:/mnt/opendap/1/IMOS/opendap/Argo/dac/csiro/5903665 dest-dir-local

