# File management

:e              reload file
:q              quit
:q!             quit without saving changes
:w              write file
:w {file}       write new file
:x              write file and exit

# Movement

    k
  h   l         basic motion
    j

w               next start of word
W               next start of whitespace-delimited word
e               next end of word
E               next end of whitespace-delimited word
b               previous start of word
B               previous start of whitespace-delimited word
0               start of line
$               end of line
gg              go to first line in file
G               go to end of file


# Insertion
#   To exit from insert mode use Esc or Ctrl-C
#   Enter insertion mode and:

a               append after the cursor
A               append at the end of the line
i               insert before the cursor
I               insert at the beginning of the line
o               create a new line under the cursor
O               create a new line above the cursor
R               enter insert mode but replace instead of inserting chars
:r {file}       insert from file

# Editing

u               undo
yy              yank (copy) a line
y{motion}       yank text that {motion} moves over
p               paste after cursor
P               paste before cursor
<Del> or x      delete a character
dd              delete a line
d{motion}       delete text that {motion} moves over
dG 		delete all lines in file

# Preceding a motion or edition with a number repeats it n times
# Examples:
50k         moves 50 lines up
2dw         deletes 2 words
5yy         copies 5 lines
42G         go to line 42


# redirect bash command output to vim
vim <(ls -la)
ls -la | vim -

# Running UNIX shell commands from vi
:r !ls -la
:r ! netcdf-checker -t=imos IMOS.nc

# open new file in new tab
:vnew (vertical)
:new  (horizontal)

# swap windows order
CTRL-W-r
CTRL W W # to change window to use
# tutorial
vimtutor

# Multiple windows
:e filename      - edit another file
:split filename  - split window and load another file
ctrl-w up arrow  - move cursor up a window
ctrl-w ctrl-w    - move cursor to another window (cycle)
ctrl-w_          - maximize current window
ctrl-w=          - make all equal size
10 ctrl-w+       - increase window size by 10 lines
:vsplit file     - vertical split
:sview file      - same as split, but readonly
:hide            - close current window
:only            - keep only this window open
:ls              - show current buffers
:b 2             - open buffer #2 in this window

# commands history
history

# to find every occurrence in the whole file,
:%s/old/new/gc
:%s/\<oldWord\>/newword/gcI # full word

# Show Line Numbers
:set nonumber
:set number
:set nu!

# buffer
:ls
:b1
:b2
[b  or ]b
:bd unload buffer, fails if not saved
:bw like :bdelete but really deletes buffer

#save , open file
:saveas
:e file

# vim janus
\n # open tree
[b # to go to the previous buffer
]b # to go to the next buffer
:Gstatus
:Gdiff

:FixWhitespace
:BuffergatorToggle
ctrl-n as many times on a word then s or c to replace


# move selected lines
# select one line or more with v , press ctrl and direction to move block up or down
#

# delete and edit word
ce

http://stackoverflow.com/questions/1218390/what-is-your-most-productive-shortcut-with-vim/1220118#1220118

# upper case lower case
visual mode + u or shift u

# move a line or a block
# ctrl + movement ( or selection of multiple line with visual

# indent line/block
:>  >> >>>


# paste from clipboard without false indentation
:set paste
:set nopaste


# indent block on any sign, = : .. requires vim-easy-align plugin
vipga=
ga=

# comment uncomment bloc
visual + \cc  # comment
visual + \cu  # uncomment

# Converting variables to or from camel case
# http://vim.wikia.com/wiki/Converting_variables_to_or_from_camel_case
#  from underscore to camelCase
:1,$s/_\([a-z]\)/\u\1/gc
# from camelCase to under_score
:%s#\(\<\u\l\+\|\l\+\)\(\u\)#\l\1_\l\2#gc
# look for comma and word without space
/,\w


# https://github.com/christoomey/vim-sort-motion
 gs2j => Sort down two lines (current + 2 below)
 gsip => Sort the current paragraph
 gsii => Sort the current indentation level (requires text-obj-indent plugin)

# nerdtree
 ctrl t

# search for string in files accross folder
:Ag
:Rg

# search for files
:FZF
