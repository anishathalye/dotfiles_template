# To set your identify:
git config --global user.name "John Doe"
git config --global user.email johndoe@example.com

# To set your editor:
git config --global core.editor emacs

# To enable color:
git config --global color.ui true

# To stage all changes for commit:
git add --all

# To commit staged changes
git commit -m "Your commit message"

# To edit previous commit message
git commit --amend

# To removed staged and working directory changes
git reset --hard

# OR How to reset my local repository to be just like the remote repository HEAD
git fetch origin
git reset --hard origin/master

# To remove untracked files
git clean -f -d

# To remove untracked and ignored files
git clean -f -d -x

# To push to the tracked master branch:
git push origin master

# To push to a specified repository:
git push git@github.com:username/project.git

# To delete the branch "branch_name"
git branch -D branch_name

# To see who commited which line in a file
git blame filename

# To sync a fork with the master repo:
git remote add upstream git@github.com:name/repo.git    # Set a new repo
git remote -v                                           # Confirm new remote repo
git fetch upstream                                      # Get branches
git branch -va                                          # List local - remote branches
git checkout master                                     # Checkout local master branch
git checkout -b new_branch                              # Create and checkout a new branch
git merge upstream/master                               # Merge remote into local repo
git show 83fb499                                        # Show what a commit did.
git show 83fb499:path/fo/file.ext                       # Shows the file as it appeared at 83fb499.
git diff branch_1 branch_2                              # Check difference between branches
git log                                                 # Show all the commits
git status                                              # Show the changes from last commit


# merge last n commits
git rebase -i HEAD~n
->replace with squash or s all commits you wanna merged to the picked one
->change the commit message
git push -f origin branch_name  	                      # to force the merge on github in case the branch was already pushed


git clean -df & git checkout .                                #  discard unstaged changes in git
git branch --merged | grep -v "\*" | xargs -n 1 git branch -d #To delete all branches that are already merged into the currently checked out branch:

#Cleans the working tree by recursively removing files that are not under version control, starting from the current directory.
#-d = Remove untracked directories in addition to untracked files -f = Force (might be not necessary depending on  clean.requireForce setting)
git clean -df


#This checks out the current index for the current directory, throwing away all changes in files from the current directory downwards.
git checkout .
